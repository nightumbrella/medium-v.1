// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Story {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String
  content   String?
  topics    String[]
  publish   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Clap      Clap[]
  Save      Save[]
}

model Comment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  storyId         String    @db.ObjectId
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  parentCommentId String?   @db.ObjectId
  parentComment   Comment?  @relation("Comment to Comment", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[] @relation("Comment to Comment")
  Clap            Clap[]
}

model Clap {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  commentId String?  @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  storyId   String   @db.ObjectId
  Story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Save {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String
  storyId   String   @db.ObjectId
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Following {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String
  followingId String
}

model Topics {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique
  selectedTopics String[]
}
